"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/socket";
exports.ids = ["pages/api/socket"];
exports.modules = {

/***/ "socket.io":
/*!****************************!*\
  !*** external "socket.io" ***!
  \****************************/
/***/ ((module) => {

module.exports = import("socket.io");;

/***/ }),

/***/ "(api)/./src/pages/api/socket.js":
/*!*********************************!*\
  !*** ./src/pages/api/socket.js ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var socket_io__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! socket.io */ \"socket.io\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([socket_io__WEBPACK_IMPORTED_MODULE_0__]);\nsocket_io__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (async (req, res)=>{\n    if (res.socket.server.io) {\n        res.end();\n        return;\n    }\n    const io = new socket_io__WEBPACK_IMPORTED_MODULE_0__.Server(res.socket.server, {\n        pingInterval: 10000,\n        pingTimeout: 5000\n    });\n    res.socket.server.io = io;\n    io.use((socket, next)=>{\n        setInterval(()=>{\n            socket.emit(\"ping\", \"pong\");\n        }, 1000);\n        next();\n    });\n    io.on(\"connection\", (socket)=>{\n        socket.join(\"global\");\n        socket.on(\"login\", async (data)=>{\n            const { username  } = data;\n            const allSockets = await io.fetchSockets();\n            const userSockets = allSockets.filter((s)=>s?.data?.user?.username === username);\n            if (userSockets.length > 0) return socket.emit(\"login\", {\n                error: \"Username already taken\"\n            });\n            const user = {\n                username\n            };\n            socket.data.user = user;\n            socket.emit(\"login\", {\n                success: true,\n                data: user\n            });\n        });\n        socket.on(\"fetchUser\", ()=>{\n            const user = socket.data.user;\n            if (user) {\n                socket.emit(\"user\", user);\n            } else {\n                socket.emit(\"user\", null);\n            }\n        });\n        socket.on(\"fetchRooms\", ()=>{\n            setInterval(async ()=>{\n                const rooms = io.sockets.adapter.rooms;\n                const allRooms = (await Promise.all(Object.keys(rooms).map(async (room)=>{\n                    const sockets = await io.in(room).fetchSockets();\n                    const users = sockets.map((s)=>s.data.user);\n                    return {\n                        id: room,\n                        name: rooms[room]?.name,\n                        owner: rooms[room]?.owner,\n                        passwordProtected: rooms[room]?.password ? true : false,\n                        maxUsers: rooms[room]?.maxUsers,\n                        users: users.length\n                    };\n                }))).filter((r)=>r.name !== \"global\");\n                socket.emit(\"rooms\", {\n                    isLogged: socket.data?.user !== undefined ? true : false,\n                    user: socket.data?.user,\n                    rooms: allRooms\n                });\n            }, 1000);\n        });\n        socket.on(\"createRoom\", (data)=>{\n            const { name , password  } = data;\n            if (!name) return socket.emit(\"createRoom\", {\n                success: false,\n                error: \"Name is required\"\n            });\n            if (io.sockets.adapter.rooms[name]) return socket.emit(\"createRoom\", {\n                success: false,\n                error: \"Room already exists\"\n            });\n            let room = {\n                id: Math.random().toString(36).substring(2, 9),\n                name: name.replace(/[^a-zA-Z0-9 ]/g, \"\"),\n                owner: socket.data.user,\n                users: 1,\n                maxUsers: 10\n            };\n            if (password) room.password = password;\n            io.sockets.adapter.rooms[room.id] = room;\n            socket.rooms.forEach((user_room)=>{\n                socket.leave(user_room);\n                updateMembers(user_room);\n                socket.to(user_room).emit(\"message\", {\n                    system: true,\n                    message: `${socket.data.user.username} left the room`\n                });\n            });\n            socket.join(room.id);\n            socket.emit(\"createRoom\", {\n                success: true,\n                data: room\n            });\n        });\n        socket.on(\"joinRoom\", async (data)=>{\n            const { id , password  } = data;\n            if (!id) return socket.emit(\"joinRoom\", {\n                success: false,\n                error: \"Room id is required\"\n            });\n            if (!io.sockets.adapter.rooms[id]) return socket.emit(\"joinRoom\", {\n                success: false,\n                error: \"Room not found\"\n            });\n            const room = io.sockets.adapter.rooms[id];\n            if (room.password && room.password !== password) return socket.emit(\"joinRoom\", {\n                success: false,\n                error: \"Wrong password\"\n            });\n            const sockets = await io.in(id).fetchSockets();\n            if (sockets.length >= room.maxUsers) return socket.emit(\"joinRoom\", {\n                success: false,\n                error: \"Room is full\"\n            });\n            if (sockets.find((s)=>s.data.user.username === socket.data.user.username)) return socket.emit(\"joinRoom\", {\n                success: false,\n                alreadyIn: true,\n                error: \"You are already in this room\"\n            });\n            socket.rooms.forEach((user_room)=>{\n                socket.leave(user_room);\n                updateMembers(user_room);\n                socket.to(user_room).emit(\"message\", {\n                    system: true,\n                    message: `${socket.data.user.username} left the room`\n                });\n            });\n            socket.join(id);\n            updateMembers(id);\n            socket.emit(\"joinRoom\", {\n                success: true,\n                data: room\n            });\n            socket.to(id).emit(\"message\", {\n                system: true,\n                message: `${socket.data.user.username} joined the room`\n            });\n        });\n        socket.on(\"leaveRoom\", async ()=>{\n            const room = Array.from(socket.rooms).find((room)=>room !== socket.id);\n            if (!room) return socket.emit(\"leaveRoom\", {\n                success: false,\n                error: \"You are not in a room\"\n            });\n            socket.leaveAll();\n            socket.join(\"global\");\n            socket.emit(\"leaveRoom\", {\n                success: true\n            });\n            updateMembers(room);\n            socket.to(room).emit(\"message\", {\n                system: true,\n                message: `${socket.data.user.username} left the room`\n            });\n        });\n        socket.on(\"roomMembers\", async ()=>{\n            const room = Array.from(socket.rooms).find((room)=>room !== socket.id);\n            if (!room) return socket.emit(\"roomMembers\", {\n                success: false,\n                error: \"You are not in a room\"\n            });\n            updateMembers(room);\n        });\n        function updateMembers(room) {\n            io.in(room).fetchSockets().then((sockets)=>{\n                const members = sockets.map((socket)=>socket.data.user);\n                if (members.length > 0) {\n                    io.in(room).emit(\"roomMembers\", {\n                        success: true,\n                        data: members\n                    });\n                } else {\n                    delete io.sockets.adapter.rooms[room];\n                }\n            });\n        }\n        socket.on(\"message\", async (data)=>{\n            const room = Array.from(socket.rooms).find((room)=>room !== socket.id);\n            if (!room) return;\n            const message = {\n                user: socket.data.user,\n                message: data.message,\n                date: new Date()\n            };\n            const sockets = await io.in(room).fetchSockets();\n            sockets.forEach((s)=>{\n                s.emit(\"message\", {\n                    ...message,\n                    self: s.id === socket.id\n                });\n            });\n        });\n        socket.on(\"fetchRoom\", async ()=>{\n            const room = Array.from(socket.rooms).find((room)=>room !== socket.id);\n            if (!room) return socket.emit(\"fetchRoom\", {\n                success: false,\n                error: \"You are not in a room\"\n            });\n            socket.emit(\"fetchRoom\", {\n                success: true,\n                data: io.sockets.adapter.rooms[room]\n            });\n        });\n        socket.on(\"disconnect\", (data)=>{\n            socket.rooms.forEach((room)=>{\n                socket.to(room).emit(\"message\", {\n                    system: true,\n                    message: `${socket.data.user.username} left the room`\n                });\n                updateMembers(room);\n            });\n            socket.leaveAll();\n        });\n    });\n    res.end();\n});\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/socket.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./src/pages/api/socket.js"));
module.exports = __webpack_exports__;

})();